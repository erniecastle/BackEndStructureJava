/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mef.erp.servicios;

import com.mef.erp.modelo.entidad.*;
import com.mef.erp.servicios.ServicioConsultaGenericaEspecialesIF;
import com.mef.erp.util.HibernateUtil;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 *
 * @author Administrador
 */
public class pruebas {

    /**
     * @param args the command line arguments
     */
    private static byte[] convertirStringToByte(String str) {
        int j;
        byte[] data = new byte[str.length() / 2];
        for (j = 0; j < str.length(); j += 2) {
            data[j / 2] = (byte) ((Character.digit(str.charAt(j), 16) << 4)
                    + Character.digit(str.charAt(j + 1), 16));
        }
        return data;
    }

    public static void main(String[] args) {
////////        HibernateUtil hibernateUtil = new HibernateUtil();
////////////        hibernateUtil.cambiarConfiguraciones("root", "adminadmin", "MEF", "com.mysql.jdbc.Driver",
////////////                "localhost", "3306", true);
////////        hibernateUtil.cambiarConfiguraciones("sa", "adminadmin", "MEF", "com.microsoft.sqlserver.jdbc.SQLServerDriver",
////////                "10.10.1.15", "1433", true);
////////        SessionFactory  sessionFactory = HibernateUtil.getSessionFactoryMEF();
////////        Session s = sessionFactory.getCurrentSession();
////////        s.beginTransaction();
////////        Paises p = (Paises)s.get(Paises.class, 1);
////////        s.lock(p, LockMode.NONE);
////////        s.getTransaction().commit();
        Calendar c = Calendar.getInstance();

//fecha inicio
        Calendar fechaInicial = new GregorianCalendar();

        fechaInicial.set(2013, Calendar.MARCH, 1);

//fecha fin
        Calendar fechaFinal = new GregorianCalendar();

        fechaFinal.set(2013, Calendar.MARCH, 30);

//restamos las fechas como se puede ver son de tipo Calendar,
//debemos obtener el valor long con getTime.getTime.
        c.setTimeInMillis(
                fechaFinal.getTime().getTime() - fechaInicial.getTime().getTime());

//la resta provoca que guardamos este valor en c,
//los milisegundos corresponde al tiempo en dias
//asi sabemos cuantos dias
        System.out.println("N. dias " + (c.get(Calendar.DAY_OF_YEAR) + 1));

        Naturaleza n = Naturaleza.valueOf("PERCEPCION");
        Calendar ca = Calendar.getInstance();
        Date fechaHoy = ca.getTime();
        ca.set(2012, 04, 16);
        Date fechaIni = ca.getTime();
        ca.set(2012, 05, 18);
        Date fechaFin = ca.getTime();
        fechaHoy.getTime();
        fechaIni.getTime();

        Calendar cInicioImss = Calendar.getInstance(), cInicioPeriodo = Calendar.getInstance();

        cInicioImss.set(2012, 00, 03);
        cInicioPeriodo.set(2012, 00, 02);
        cInicioImss.getTime();
        cInicioPeriodo.getTime();
        int diasDif = 0;
        if (cInicioImss.after(cInicioPeriodo)) {
            diasDif = cInicioImss.get(Calendar.DATE) - cInicioPeriodo.get(Calendar.DATE);
        }

        if ((fechaHoy.after(fechaIni) | fechaHoy.equals(fechaIni)) && (fechaHoy.before(fechaFin) | fechaHoy.equals(fechaFin))) {
            System.out.println("true");
        }

        ApplicationContext context = new ClassPathXmlApplicationContext("remoting-servlet.xml");
        // ServicioPeriodoIF periodo = (ServicioPeriodoIF) context.getBean("servicioPeriodo");
        // ServicioConceptoDeNominaDefinicionIF nominadef = (ServicioConceptoDeNominaDefinicionIF) context.getBean("servicioConceptoDeNominaDefinicion");
//        ServicioConsultaGenericaIF generic = (ServicioConsultaGenericaIF) context.getBean("servicioConsultaGenerica");
////////        ServicioBaseDatosIF base3 = (ServicioBaseDatosIF) context.getBean("servicioBaseDatos");
////////        base3.obtenerConexion("sa", "adminadmin", "MEFMaster", "com.microsoft.sqlserver.jdbc.SQLServerDriver", "10.10.1.15", "1433", true);
////////
        ServicioBaseDatosIF base2 = (ServicioBaseDatosIF) context.getBean("servicioBaseDatos");
        base2.obtenerConexion("sa", "adminadmin", "MEFMasterPruebaExtensa", "MEFPruebaExtensa", "com.microsoft.sqlserver.jdbc.SQLServerDriver", "localhost", "1433", true);

        ServicioConsultaGenericaIF generic = (ServicioConsultaGenericaIF) context.getBean("servicioConsultaGenerica");
        //generic.getObject("ConcepNomDefi", null, null, new String[] {"@fecha"}, new Object[] {"(select max(fecha) from ConcepNomDefi cnd where o.clave=cnd.clave)"}, "Select COUNT(*)", "sa|MEFPruebaExtensa|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|N", "sa|MEFMasterPruebaExtensa|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|M");
        //generic.getObject("ConcepNomDefi", null, null, new String[] {}, new Object[] {}, "Select COUNT(*)", "sa|MEFPruebaExtensa|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|N", "sa|MEFMasterPruebaExtensa|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|M");
        // generic.getObject("ConcepNomDefi", null, null, null, null, "Select COUNT(*)", "sa|MEFPruebaExtensa|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|N", "sa|MEFMasterPruebaExtensa|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|M");
        // generic.getObject("ConcepNomDefi", null, null, null, null, null, "sa|MEFPruebaExtensa|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|N", "sa|MEFMasterPruebaExtensa|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|M");
//        generic.getObject("ConcepNomDefi", null, null, new String[]{"clave", "@fecha", "@fecha"},
//                new Object[]{"100", "(select max(fecha) from ConcepNomDefi cnd where o.clave=cnd.clave)", "(select max(fecha) from ConcepNomDefi cnd where o.clave=cnd.clave)"},
//                "Select COUNT(*)", "sa|MEFPruebaExtensa|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|N", "sa|MEFMasterPruebaExtensa|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|M");

        generic.getObject("ConcepNomDefi", null, null, new String[]{"@fecha", "@fecha"},
                new Object[]{"(select max(fecha) from ConcepNomDefi cnd where o.clave=cnd.clave)", "(select max(fecha) from ConcepNomDefi cnd where o.clave=cnd.clave)"},
                "Select COUNT(*)", "sa|MEFPruebaExtensa|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|N", "sa|MEFMasterPruebaExtensa|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|M");
        generic.getObject("ConcepNomDefi", null, null, new String[]{"@fecha"},
                new Object[]{"(select max(fecha) from ConcepNomDefi cnd where o.clave=cnd.clave)"},
                "Select COUNT(*)", "sa|MEFPruebaExtensa|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|N", "sa|MEFMasterPruebaExtensa|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|M");

        List<byte[]> listData = new ArrayList<byte[]>();
        List<String> datos = new ArrayList<String>();
        int j;
//        ISR
        String ss
        byte[] data = convertirStringToByte(ss);
////////
////////        ss
////////        data = convertirStringToByte(ss);
////////        String  valores = new String(data);
////////        System.out.println(valores);
////////        System.out.println("");
////////        valores = valores.replace("ControlPorAño", "ControlPorAno");
////////        System.out.println(valores);
////////        datos.add(valores);
////////
////////
////////        ///SUBSIDIO AL EMPLEADO ANUAL
////////        ss = "3C3F786D6C2076657273696F6E3D22312E302220656E636F64696E673D225554462D38223F3E0A3C7461626C65206E616D653D22535542534944494F223E3C70726F70657274792063616E743D2231222073697374656D613D223122207374617475733D2231223E3C636F6C756D6E6120666F726D61746F3D2222206E6F6D627265436F6C3D224C696D697465496E666572696F722220706F733D223122207469706F3D22466C6F61742220746974756C6F3D224C6F776572204C696D6974222F3E3C4964696F6D61733E3C6573206E6F6D6272653D2245737061C3B16F6C223E4C696D69746520496E666572696F723C2F65733E3C656E206E6F6D6272653D22496E676C6573223E4C6F776572204C696D69743C2F656E3E3C2F4964696F6D61733E3C2F70726F70657274793E3C70726F70657274792063616E743D2231222073697374656D613D223122207374617475733D2231223E3C636F6C756D6E6120666F726D61746F3D2222206E6F6D627265436F6C3D2243756F74612220706F733D223222207469706F3D22466C6F61742220746974756C6F3D225368617265222F3E3C4964696F6D61733E3C6573206E6F6D6272653D2245737061C3B16F6C223E43756F74613C2F65733E3C656E206E6F6D6272653D22496E676C6573223E53686172653C2F656E3E3C2F4964696F6D61733E3C2F70726F70657274793E3C436F6E74726F6C61646F7265733E3C436F6E74726F6C61646F7220656E74696461643D22636F6D2E6D65662E6572702E6775692E706572736F6E616C697A61646F732E504A5370696E6E657222206964656E746966696361646F723D22436F6E74726F6C506F7241C3B16F222073697374656D613D223122207469706F3D224361707475726520666F722079656172222F3E3C2F436F6E74726F6C61646F7265733E3C2F7461626C653E";
////////        data = convertirStringToByte(ss);
////////        valores = new String(data);
////////        System.out.println(valores);
////////        System.out.println("");
////////        valores = valores.replace("ControlPorAño", "ControlPorAno");
////////        System.out.println(valores);
////////        datos.add(valores);
////////
////////
////////
////////

        ServicioTablaDatos tabladatos = (ServicioTablaDatos) context.getBean("servicioTablaDatos");
        Mensaje m = tabladatos.consultaPorControladores("RazonesSociales1", "sa|MEFMaster|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|M");
        if (m.getNoError() == 0) {
            List list = (ArrayList) m.getResultado();
            TablaDatos e = (TablaDatos) list.get(0);
            e.setFileXml(data);
            e.setControladores("RazonesSociales0001");
            tabladatos.actualizar(e, "sa|MEFMaster|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|M");
        }

        Session session = HibernateUtil.getSessionFactoryMEFMaster().getCurrentSession();
        session.beginTransaction();
        Query query = null;
//        Query query = session.createQuery("From TablaDatos WHERE id = :clave");
//        query.setParameter("clave", 5);
//        TablaDatos d = (TablaDatos) query.uniqueResult();
//////////////        if (datos != null) {
//////////////            System.out.println(new String(datos.getFileXml()));
//////////////        }
////////        int res, cont = 6;
////////        for (int i = 0; i < datos.size(); i++) {
        query = session.createQuery("UPDATE TablaDatos set fileXml = :fileXml  WHERE id = :clave");
        query.setParameter("fileXml", data);
        query.setParameter("clave", 5);
////////            cont++;
////////            res = query.executeUpdate();
////////            System.out.println(res);
////////        }
        session.getTransaction().commit();
////////
////////
////////        ///listData.add(data);
////////        //// System.out.println(new String(data));
////////
////////
////////
////////
////////
////////        //TablaBase factor integracion
////////        ss
////////        data = convertirStringToByte(ss);
////////        System.out.println(new String(data));
////////
////////        //SUBSIDIO
////////        ss
////////        data = convertirStringToByte(ss);
////////        listData.add(data);
////////
////////        //DIAS FESTIVOS
////////        ss = "3C3F786D6C2076657273696F6E3D22312E302220656E636F64696E673D225554462D38223F3E0A3C7461626C613E3C6461746F2069643D2231223E3C66656368613E30312F30312F323031333C2F66656368613E3C6465736372697063696F6E3E41C3B16F206E7565766F3C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D2232223E3C66656368613E30362F30312F323031333C2F66656368613E3C6465736372697063696F6E3E44696173206465206C6F732073616E746F73202052657965733C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D2233223E3C66656368613E30352F30322F323031333C2F66656368613E3C6465736372697063696F6E3E446961206465206C6120436F6E737469747563696F6E3C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D2234223E3C66656368613E32342F30322F323031333C2F66656368613E3C6465736372697063696F6E3E446961206465206C612062616E64657261204E6163696F6E616C3C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D2235223E3C66656368613E32312F30332F323031333C2F66656368613E3C6465736372697063696F6E3E4E6174616C6963696F2062656E69746F204A756172657A3C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D2236223E3C66656368613E32382F30332F323031333C2F66656368613E3C6465736372697063696F6E3E4A75657665732053616E746F3C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D2237223E3C66656368613E32392F30332F323031333C2F66656368613E3C6465736372697063696F6E3E566965726E65732053616E746F3C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D2238223E3C66656368613E33302F30342F323031333C2F66656368613E3C6465736372697063696F6E3E4469612064656C204E69C3B16F3C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D2239223E3C66656368613E30312F30352F323031333C2F66656368613E3C6465736372697063696F6E3E4469612064656C2074726162616A6F3C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D223130223E3C66656368613E30352F30352F323031333C2F66656368613E3C6465736372697063696F6E3E426174616C6C6120646520707565626C613C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D223131223E3C66656368613E31302F30352F323031333C2F66656368613E3C6465736372697063696F6E3E446961206465206C6173206D61647265733C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D223132223E3C66656368613E30312F30392F323031333C2F66656368613E3C6465736372697063696F6E3E496E666F726D6520507265736964656E6369616C3C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D223133223E3C66656368613E31362F30392F323031333C2F66656368613E3C6465736372697063696F6E3E446961206465206C6120696E646570656E64656E6369613C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D223134223E3C66656368613E30312F31312F323031333C2F66656368613E3C6465736372697063696F6E3E44696120646520746F646F73206C6F732073616E746F733C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D223135223E3C66656368613E30322F31312F323031333C2F66656368613E3C6465736372697063696F6E3E446961206465206C6F73206D756572746F733C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D223136223E3C66656368613E32302F31312F323031333C2F66656368613E3C6465736372697063696F6E3E5265766F6C7563696F6E206D65786963616E613C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D223137223E3C66656368613E31322F31322F323031333C2F66656368613E3C6465736372697063696F6E3E4469612064652076697267656E2064652067756164616C7570653C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D223138223E3C66656368613E32342F31322F323031333C2F66656368613E3C6465736372697063696F6E3E4E6F636865206275656E613C2F6465736372697063696F6E3E3C2F6461746F3E3C6461746F2069643D223139223E3C66656368613E32352F31322F323031333C2F66656368613E3C6465736372697063696F6E3E4E6176696461643C2F6465736372697063696F6E3E3C2F6461746F3E3C2F7461626C613E";
////////        data = convertirStringToByte(ss);
////////        listData.add(data);
////////
////////        //ZONA SALARIAL
////////        ss
////////        data = convertirStringToByte(ss);
////////        listData.add(data);
////////
////////        //FACTOR DE INTEGRACION
////////        ss
////////        data = convertirStringToByte(ss);
////////        listData.add(data);
////////
////////        //ISR ANUAL
////////        ss
////////        data = convertirStringToByte(ss);
////////        listData.add(data);
////////
////////        //SUBSIDIO ANUAL
////////        ss
////////        data = convertirStringToByte(ss);
////////        System.out.println(new String(data));
////////        listData.add(data);
////////////
////////////
////////////        Session session = HibernateUtil.getSessionFactoryMEFMaster().getCurrentSession();
////////////        session.beginTransaction();
////////////        Query query = null;
//////////////////        Query query = session.createQuery("From TablaDatos WHERE id = :clave");
//////////////////        query.setParameter("clave", 5);
//////////////////        TablaDatos datos = (TablaDatos) query.uniqueResult();
//////////////////        if (datos != null) {
//////////////////            System.out.println(new String(datos.getFileXml()));
//////////////////        }
////////////        int res;
////////////        for (int i = 0; i < listData.size(); i++) {
////////////            System.out.println(new String(listData.get(i)));
////////////            query = session.createQuery("UPDATE TablaDatos set fileXml = :fileXml  WHERE id = :clave");
////////////            query.setParameter("fileXml", listData.get(i));
////////////            query.setParameter("clave", i + 1);
////////////            res = query.executeUpdate();
////////////            System.out.println(res);
////////////        }
////////////        session.getTransaction().commit();
////////////
////////////
////////////
////////////
//        Session session = null;
//        try {
//        ServicioBaseDatosIF base2 = (ServicioBaseDatosIF) context.getBean("servicioBaseDatos");
        base2.obtenerConexion("sa", "adminadmin", "MEFMaster", "MEF", "com.microsoft.sqlserver.jdbc.SQLServerDriver", "localhost", "1433", true);

//        ServicioCentroDeCostosIF con = (ServicioCentroDeCostosIF) context.getBean("servicioCentroDeCostos");
//        con.setUuidCxn("sa|MEF|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|N");
//        CentroDeCosto cnd = new CentroDeCosto();
//        cnd.setClave("777");
//        con.agregar(cnd);
//        ServicioPaisesIF paises = (ServicioPaisesIF) context.getBean("servicioPaises");
//        //ServicioPaisesIF paises2 = (ServicioPaisesIF) context.getBean("servicioPaises");
//        paises.setUuidCxn("sa|MEF2|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|N");
//        //paises2.setUuidCxn("sa|MEF|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|N");
//        Mensaje pp = paises.getPaisPorClave("22");
//        if (pp.getNoError() == 0) {
//            paises.eliminar((Paises) pp.getResultado());
//        }
//        Paises pp2 = paises2.getPaisPorClave("77");
//        Paises pp = new Paises();
//        pp.setClave("01");
//        pp.setDescripcion("nuebad");
//        pp.setNacionalidad("aekda");
        // pp2.setDescripcion("nuevo");
        //paises.agregar(pp);
        // paises2.actualizar(pp);
////        System.out.println("");
//        String toString = "I:\\ReporteNomina.jrxml";
//        Map<String, Object> values = new HashMap<String, Object>();
//        //MainPrincipal.getSesionActiva();
//        //Session session = hibernateUtil.getSessionFactoryMEF().getCurrentSession();
//        //session.beginTransaction();
//        Session session = HibernateUtil.getConfigDBSimple().buildSessionFactory().getCurrentSession();
//        session.beginTransaction();
//        values.put(JRHibernateQueryExecuterFactory.PARAMETER_HIBERNATE_SESSION, session);
//        values.put("claveRazonsocial", "0001");
//        values.put("claveTipoCorrida", "NOR");
//        JasperReport report;
//        try {
//            report = JasperCompileManager.compileReport(toString);
//            JasperPrint print = JasperFillManager.fillReport(report, values);
//            JasperViewer.viewReport(print, true);
//        } catch (JRException ex) {
//            
//        }
//        session.beginTransaction().commit();
//            session = HibernateUtil.getSessionFactoryMEFMaster().getCurrentSession();
//            session.beginTransaction();
//            Query q = null;
//            StringBuilder stringBuilder = new StringBuilder();
//            stringBuilder.append("select c from Contenedor c ");
//            stringBuilder.append("where c.tipoAcciones in (:valores)");
//            q = session.createQuery(stringBuilder.toString());
////            Object[] listValores = new Object[]{TipoAcciones.ACCIONMULTIPLE, TipoAcciones.GRUPOREPORTEPADRE};
//            Object[] listValores = new Object[]{TipoAcciones.ACCIONMULTIPLE, TipoAcciones.GRUPOCONSULTAPADRE};
//            q.setParameterList("valores", listValores);
//            List<Contenedor> listContendoresAccionesMultiples;
//            listContendoresAccionesMultiples = q.list();
//            if (listContendoresAccionesMultiples == null) {
//                listContendoresAccionesMultiples = new ArrayList<Contenedor>();
//            }
//            stringBuilder.delete(0, stringBuilder.length()).append("from TipoElemento where id = :clave");
//            q = session.createQuery(stringBuilder.toString());
//            q.setParameter("clave", 2);
//            TipoElemento tipoElemento = (TipoElemento) q.uniqueResult();
//            int posicion = 3000;
//            if (!listContendoresAccionesMultiples.isEmpty()) {
//                List<Contenedor> values2 = new ArrayList<Contenedor>();
//                int i, j;
////                for ( i = 0; i < listContendoresAccionesMultiples.size(); i++) {
////                    stringBuilder.delete(0, stringBuilder.length()).append("select new Contenedor(r) from ReporteDinamico r where r.razonSocial.claveRazonSocial=:clave and r.contenedor.id=:contenedorId Order by r.contenedor.id , r.nombre");
////                    q = session.createQuery(stringBuilder.toString());
////                    q.setParameter("clave", "1");
////                    q.setParameter("contenedorId", listContendoresAccionesMultiples.get(i).getId());
////                    values2 = q.list();
////                    if (values2 == null) {
////                        values2 = new ArrayList<Contenedor>();
////                    }
////                    for ( j = 0; j < values2.size(); j++) {
////                        values2.get(j).setId(posicion);
////                        values2.get(j).setParentId(listContendoresAccionesMultiples.get(i).getId());
////                        values2.get(j).setOrdenId(posicion);
////                        values2.get(j).setTipoElemento(tipoElemento);
////                        values2.get(j).setHerramienta(listContendoresAccionesMultiples.get(i).getHerramienta());
////                        session.saveOrUpdate(values2.get(j));
////                        posicion++;
////                    }
////                }
//                posicion = 4000;
//                for (i = 0; i < listContendoresAccionesMultiples.size(); i++) {
//                    stringBuilder.delete(0, stringBuilder.length()).append("Select new Contenedor(o) from ParametrosConsulta o ");
//                    stringBuilder.append(" Where o.contenedorGrupo.id = :idContenedor ");
//                    stringBuilder.append(" Order by o.contenedorGrupo.id, o.nombre ");
//                    q = session.createQuery(stringBuilder.toString());
//                    q.setParameter("idContenedor", listContendoresAccionesMultiples.get(i).getId());
//                    values2 = q.list();
//                    if (values2 == null) {
//                        values2 = new ArrayList<Contenedor>();
//                    }
//                    for (j = 0; j < values2.size(); j++) {
//                        values2.get(j).setId(posicion);
//                        values2.get(j).setParentId(listContendoresAccionesMultiples.get(i).getId());
//                        values2.get(j).setOrdenId(posicion);
//                        values2.get(j).setTipoElemento(tipoElemento);
//                        values2.get(j).setHerramienta(listContendoresAccionesMultiples.get(i).getHerramienta());
//                        session.saveOrUpdate(values2.get(j));
//                        posicion++;
//                    }
//                }
//
//            }
//            session.getTransaction().commit();
//        } catch (Exception e) {
//            System.out.println("ERROR " + e.getMessage());
//            session.getTransaction().rollback();
//        }
//        ServicioParentescoIF base = (ServicioParentescoIF) context.getBean("servicioParentesco");
//                
//        Parentesco p = new Parentesco();
//        p.setClave("P01");
//        p.setDescripcion("Parentesco1");
//        
//        System.out.println(base.agregar(p));
//        ServicioEstudiosIF base = (ServicioEstudiosIF) context.getBean("servicioEstudios");
//        
//        Estudios e = new Estudios();
//        e.setClave("E02");
//        e.setDescripcion("Estudio1");
//        System.out.println(base.agregar(e));
//////        ServicioCursosIF base = (ServicioCursosIF) context.getBean("servicioCursos");
//////        Cursos cur = new Cursos();
//////        cur.setClave("1");
//////        cur.setDescripcion("Curso1");
//////        System.out.println(base.agregar(cur));
////        List<?> list = base.consultaPorRangosFiltro("queryPlazasEmpleadoEspecial", 1, 50, new String[]{"", "", ""}, new Object[]{"1", "1"});
//        System.out.println("list");
        //<editor-fold defaultstate="collapsed" desc="parametros">
        Mensaje mensaje = null;
        ServicioModuloIF servicioModulo = (ServicioModuloIF) context.getBean("servicioModulo");
//        servicioModulo.setUuidCxn("sa|MEFMaster|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|M");
//        mensaje = servicioModulo.getModuloAll();
        List<Modulo> listModulo;
        if (mensaje.getNoError() == 0) {
            listModulo = (List<Modulo>) mensaje.getResultado();
        } else {
            System.out.println("ERROR  List<Modulo> ");
            return;
        }
        ServicioElementosAplicacionIF servicioElementosAplicacion = (ServicioElementosAplicacionIF) context.getBean("servicioElementosAplicacion");
        mensaje = servicioElementosAplicacion.getElementosAplicacionAll("sa|MEFMaster|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|M");
        List<ElementosAplicacion> listElementosAplicacion;
        if (mensaje.getNoError() == 0) {
            listElementosAplicacion = (List<ElementosAplicacion>) mensaje.getResultado();
        } else {
            System.out.println("ERROR   List<ElementosAplicacion>  ");
            return;
        }
        ServicioParametrosIF servicioParametros = (ServicioParametrosIF) context.getBean("servicioParametros");
//        servicioParametros.setUuidCxn("sa|MEFMaster|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|M");
        List<ElementosAplicacion> listRazonSocialElemento, listTurnoElement;
        listRazonSocialElemento = new ArrayList<ElementosAplicacion>();
        listRazonSocialElemento.add(listElementosAplicacion.get(0));
        List<Parametros> listParametros = new ArrayList<Parametros>();
        Parametros parametros = new Parametros();
        parametros.setClave(Long.valueOf("1"));
        parametros.setNombre("PermiteTipoCostos");
        parametros.setOrdenId(1);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("2"));
        parametros.setNombre("Dia de inicio de semana.");
        parametros.setOrdenId(2);
        parametros.setValor("1");
        parametros.setOpcionesParametros("Domingo,Lunes,Martes,Miercoles,Jueves,Viernes,Sabado");//JSA01
        parametros.setTipoConfiguracion(2);
        parametros.setPropiedadConfig("Domingo|Lunes|Martes|Miercoles|Jueves|Viernes|Sabado");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("3"));
        parametros.setNombre("Margen de tiempo de Tolerancia para considerar como Checadas Repetidas");
        parametros.setOrdenId(3);
        parametros.setValor("10");
        parametros.setOpcionesParametros("El margen es en minutos");//JSA01
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("2|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("4"));
        parametros.setNombre("Tiempo de Tolerancia Antes de Hora de Entrada");
        parametros.setOrdenId(4);
        parametros.setValor("5");
        parametros.setOpcionesParametros("El margen es en minutos");//JSA01
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("2|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("5"));
        parametros.setNombre("Ajustar los periodos de nomina");
        parametros.setOrdenId(5);
        parametros.setValor("2");
        parametros.setOpcionesParametros("Esto le permitira que los periodos se generen exactos al mes.");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("6"));
        parametros.setNombre("¿Manejar Organigrama por Plaza?");
        parametros.setOrdenId(6);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("7"));
        parametros.setNombre("¿Tipo de tabla de ISR a utilizar?");
        parametros.setOrdenId(7);
        parametros.setValor("1");
        parametros.setOpcionesParametros("Se puede utilizar la tabla mensual o bien por cada periodicidad un tabla correspondiente a ella.");//JSA01
        parametros.setTipoConfiguracion(2);
        parametros.setPropiedadConfig("Mensual|Periodicidad");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.ISR);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("8"));
        parametros.setNombre("Factor de aplicación tabla mensual");
        parametros.setOrdenId(8);
        parametros.setValor("30.4");
        parametros.setOpcionesParametros("introduzca un numero ejemplo: 30 o 30.4");
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("2|2");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.ISR);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("9"));
        parametros.setNombre("Factor de aplicación tabla anual");
        parametros.setOrdenId(9);
        parametros.setValor("365");
        parametros.setOpcionesParametros("Introduzca un numero");//JSA01
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("3|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.ISR);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("10"));
        parametros.setNombre("¿Desglose interno del ISR?");
        parametros.setOrdenId(10);
        parametros.setValor("2");
        parametros.setOpcionesParametros("Normal y Anual. :: Normal, Anual y Directo. :: Tabla Anual.");//JSA01
        parametros.setTipoConfiguracion(2);
        parametros.setPropiedadConfig("Normal y Anual|Normal, Anual y Directo|Tabla Anual");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.ISR);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("11"));
        parametros.setNombre("¿Modo para ajustar el ISR en el mes?");
        parametros.setOrdenId(11);
        parametros.setValor("1");
        parametros.setOpcionesParametros("1=Se proporciona en cada periodo. :: 2=Proporcionar de acuerdo a los días de periodos del mes. :: 3=En el último periodo se ajusta sin proporcionar al mes. :: 4=Proporcional con la tabla Anual");//JSA01
        parametros.setTipoConfiguracion(2);
        parametros.setPropiedadConfig("Proporciona c/periodo|Proporciona segun días periodo del mes|Último periodo sin ajustar al mes|Proporciona con la tabla anual");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.ISR);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("12"));
        parametros.setNombre("¿Calcular en automatico el SDI?");
        parametros.setOrdenId(12);
        parametros.setValor("1");
        parametros.setOpcionesParametros("");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.IMSS);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("13"));
        parametros.setNombre("¿Manejar pagos por hora?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(13);
        parametros.setValor("2");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.SUELDOSYSALARIOS);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("14"));
        parametros.setNombre("¿Manejar horas Por?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(14);
        parametros.setValor("2");
        parametros.setTipoConfiguracion(2);
        parametros.setPropiedadConfig("Natural|HSM");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.SUELDOSYSALARIOS);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("15"));
        parametros.setNombre("¿Manejar tablas de prestaciones?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(15);
        parametros.setValor("2");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.PRESTACIONES);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("16"));
        parametros.setNombre("¿Activar topes salariales?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(16);
        parametros.setValor("2");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.IMSS);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("17"));
        parametros.setNombre("¿Activar control de puestos por Registro Patronal?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(17);
        parametros.setValor("2");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("18"));
        parametros.setNombre("¿Manejar salario por tabulador?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(18);
        parametros.setValor("2");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.SUELDOSYSALARIOS);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("19"));
        parametros.setNombre("¿Permitir manejar multiplazas?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(19);
        parametros.setValor("2");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.INFORMACIONNOMINAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("20"));
        parametros.setNombre("¿Permitir manejar Departamentos?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(20);
        parametros.setValor("1");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("21"));
        parametros.setNombre("¿Permitir manejar Centros de costos?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(21);
        parametros.setValor("1");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("22"));
        parametros.setNombre("¿Manejar datos de la nomina del empleado por folio o referencia?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(22);
        parametros.setValor("2");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.INFORMACIONNOMINAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("23"));
        parametros.setNombre("¿Activar funcionalidad de catalogo a Movimientos?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(23);
        parametros.setValor("2");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.MOVIMIENTOS);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("24"));
        parametros.setNombre("¿Minimizar en automatico datos de la nomina?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(24);
        parametros.setValor("1");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("25"));
        parametros.setNombre("¿Forma de alimentar el sueldo o salario del empleado?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(25);
        parametros.setValor("3");
        parametros.setTipoConfiguracion(2);
        parametros.setPropiedadConfig("Diario|Semanal|Quincenal|Mensual");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.SUELDOSYSALARIOS);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("26"));
        parametros.setNombre("¿Insercion automatica modo grid?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(26);
        parametros.setValor("2");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("27"));
        parametros.setNombre("¿Capturar datos de nomina del empleado separado?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(27);
        parametros.setValor("2");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.INFORMACIONNOMINAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("28"));
        parametros.setNombre("¿Manejar orden calculo en conceptos?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(28);
        parametros.setValor("2");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.CONCEPTOS);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("29"));
        parametros.setNombre("¿Pagar nomina sobre dias naturales?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(29);
        parametros.setValor("2");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.SUELDOSYSALARIOS);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("30"));
        parametros.setNombre("¿Mostrar conceptos con valor 0?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(30);
        parametros.setValor("1");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.CONCEPTOS);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("31"));
        parametros.setNombre("¿Mostrar captura registro incapacidades?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(31);
        parametros.setValor("2");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("32"));
        parametros.setNombre("¿Mostrar busqueda en los catalogos en automatico?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(32);
        parametros.setValor("1");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("33"));
        parametros.setNombre("Año activo para periodos");
        parametros.setOpcionesParametros("Ingresar el año del periodo a mostrar");
        parametros.setOrdenId(33);
        parametros.setValor("2014");
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("4|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("34"));
        parametros.setNombre("Pais predeterminado");
        parametros.setOpcionesParametros("Mostrar pais predeterminado");
        parametros.setOrdenId(34);
        parametros.setValor("01");
        parametros.setTipoConfiguracion(3);
        parametros.setPropiedadConfig("Paises|Clave|Descripcion");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("35"));
        parametros.setNombre("Generar datos de timbrado al cerrar el periodo?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(35);
        parametros.setValor("1");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("36"));
        parametros.setNombre("Combinar detallado del concepto para el recibo de nómina?");
        parametros.setOpcionesParametros("");
        parametros.setOrdenId(35);
        parametros.setValor("2");
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("37"));
        parametros.setNombre("Tiempo de Tolerancia Antes de Hora de Entrada");
        parametros.setOrdenId(37);
        parametros.setValor("5");
        parametros.setOpcionesParametros("El tiempo es en minutos");//JSA01
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("2|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("38"));
        parametros.setNombre("Considerar como retardo si excede tolerancia después de Entrada");
        parametros.setOrdenId(6);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("39"));
        parametros.setNombre("Activar tiempo límite en entrada para considerar como ausentismo");
        parametros.setOrdenId(7);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("40"));
        parametros.setNombre("Tiempo límite para considerar como ausentismo");
        parametros.setOrdenId(8);
        parametros.setValor("5");
        parametros.setOpcionesParametros("El tiempo es en minutos");//JSA01
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("2|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("41"));
        parametros.setNombre("Impedir registro de entrada si llega despues del tiempo límite para ausentismo");
        parametros.setOrdenId(9);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("42"));
        parametros.setNombre("Tolerancia Antes de Hora de Salida");
        parametros.setOrdenId(10);
        parametros.setValor("1");
        parametros.setOpcionesParametros("El tiempo es en minutos");//JSA01
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("2|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("43"));
        parametros.setNombre("Restringir salida antes del tiempo");
        parametros.setOrdenId(11);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("44"));
        parametros.setNombre("Si salida es antes de este tiempo se considera ausentismo");
        parametros.setOrdenId(12);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

//////            parametros = new Parametros();
//////            parametros.setClave(Long.valueOf("45"));
//////            parametros.setNombre("Modalidad para establecer Margen de Tiempo para considerar horas extras");
//////            parametros.setOrdenId(13);
//////            parametros.setValor("1");
//////            parametros.setOpcionesParametros("");//JSA01
//////            parametros.setTipoConfiguracion(1);
//////            parametros.setPropiedadConfig("");
//////            parametros.setElementosAplicacion(listRazonSocialElemento);
//////            parametros.setModulo(listModulo.get(0));
//////            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
//////            listParametros.add(parametros);
//////
//////            parametros = new Parametros();
//////            parametros.setClave(Long.valueOf("46"));
//////            parametros.setNombre("Establecer en minutos");
//////            parametros.setOrdenId(14);
//////            parametros.setValor("1");
//////            parametros.setOpcionesParametros("");//JSA01
//////            parametros.setTipoConfiguracion(1);
//////            parametros.setPropiedadConfig("");
//////            parametros.setElementosAplicacion(listRazonSocialElemento);
//////            parametros.setModulo(listModulo.get(0));
//////            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
//////            listParametros.add(parametros);
//////
//////            parametros = new Parametros();
//////            parametros.setClave(Long.valueOf("47"));
//////            parametros.setNombre("Tiempo en minutos predeterminado para horas extras");
//////            parametros.setOrdenId(15);
//////            parametros.setValor("1");
//////            parametros.setOpcionesParametros("");//JSA01
//////            parametros.setTipoConfiguracion(1);
//////            parametros.setPropiedadConfig("");
//////            parametros.setElementosAplicacion(listRazonSocialElemento);
//////            parametros.setModulo(listModulo.get(0));
//////            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
//////            listParametros.add(parametros);
//////
//////            parametros = new Parametros();
//////            parametros.setClave(Long.valueOf("48"));
//////            parametros.setNombre("Establecer en hora fija");
//////            parametros.setOrdenId(16);
//////            parametros.setValor("1");
//////            parametros.setOpcionesParametros("");//JSA01
//////            parametros.setTipoConfiguracion(1);
//////            parametros.setPropiedadConfig("");
//////            parametros.setElementosAplicacion(listRazonSocialElemento);
//////            parametros.setModulo(listModulo.get(0));
//////            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
//////            listParametros.add(parametros);
        parametros = new Parametros();
        parametros.setClave(Long.valueOf("49"));
        parametros.setNombre("Utilizar tope diario para horas extras");
        parametros.setOrdenId(17);
        parametros.setValor("1");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("50"));
        parametros.setNombre("Tope Horas Dobles Diario");
        parametros.setOrdenId(18);
        parametros.setValor("3");
        parametros.setOpcionesParametros("El tope default es 3");//JSA01
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("1|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("51"));
        parametros.setNombre("Tope Horas Dobles Semanal");
        parametros.setOrdenId(19);
        parametros.setValor("9");
        parametros.setOpcionesParametros("El tope default es 9");//JSA01
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("1|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("52"));
        parametros.setNombre("Solicitar autorización si excede cierta cantidad de hrs extras");
        parametros.setOrdenId(20);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("53"));
        parametros.setNombre("Cantidad de horas extras que no requieren autorización");
        parametros.setOrdenId(21);
        parametros.setValor("0");
        parametros.setOpcionesParametros("La cantidad es de minutos");//JSA01
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("1|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("54"));
        parametros.setNombre("Tipo de Redondeo para horas ordinarias");
        parametros.setOrdenId(22);
        parametros.setValor("1");
        parametros.setOpcionesParametros("El personalizado se puede establecer el redondeo y el factor del mismo, con la opcion de tabla se selecciona una opcion guardado desde el catalago de tipo de redondeos");//JSA01
        parametros.setTipoConfiguracion(2);
        parametros.setPropiedadConfig("Personalizado|Tabla");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

//            parametros = new Parametros();
//            parametros.setClave(Long.valueOf("55"));
//            parametros.setNombre("Redondeo y Factor de Redondeo");
//            parametros.setOrdenId(23);
//            parametros.setValor("1");
//            parametros.setOpcionesParametros("");//JSA01
//            parametros.setTipoConfiguracion(1);
//            parametros.setPropiedadConfig("");
//            parametros.setElementosAplicacion(listRazonSocialElemento);
//            parametros.setModulo(listModulo.get(0));
//            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
//            listParametros.add(parametros);
//
//            parametros = new Parametros();
//            parametros.setClave(Long.valueOf("56"));
//            parametros.setNombre("Tabla");
//            parametros.setOrdenId(24);
//            parametros.setValor("1");
//            parametros.setOpcionesParametros("");//JSA01
//            parametros.setTipoConfiguracion(1);
//            parametros.setPropiedadConfig("");
//            parametros.setElementosAplicacion(listRazonSocialElemento);
//            parametros.setModulo(listModulo.get(0));
//            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
//            listParametros.add(parametros);
        parametros = new Parametros();
        parametros.setClave(Long.valueOf("57"));
        parametros.setNombre("Activar Primer Coffe Break");
        parametros.setOrdenId(25);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("58"));
        parametros.setNombre("Activar checada salida y entrada para primer Coffe Break");
        parametros.setOrdenId(26);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

//            parametros = new Parametros();
//            parametros.setClave(Long.valueOf("59"));
//            parametros.setNombre("Etiqueta Primer Coffe Break");
//            parametros.setOrdenId(27);
//            parametros.setValor("Primer coffe break");
//            parametros.setOpcionesParametros("");//JSA01
//            parametros.setTipoConfiguracion(1);
//            parametros.setPropiedadConfig("");
//            parametros.setElementosAplicacion(listRazonSocialElemento);
//            parametros.setModulo(listModulo.get(0));
//            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
//            listParametros.add(parametros);
//            parametros = new Parametros();
//            parametros.setClave(Long.valueOf("60"));
//            parametros.setNombre("Género para Primer Coffe Break");
//            parametros.setOrdenId(28);
//            parametros.setValor("M");
//            parametros.setOpcionesParametros("");//JSA01
//            parametros.setTipoConfiguracion(1);
//            parametros.setPropiedadConfig("");
//            parametros.setElementosAplicacion(listRazonSocialElemento);
//            parametros.setModulo(listModulo.get(0));
//            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
//            listParametros.add(parametros);
        parametros = new Parametros();
        parametros.setClave(Long.valueOf("61"));
        parametros.setNombre("Activar Tiempo de Comida");
        parametros.setOrdenId(29);
        parametros.setValor("1");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("62"));
        parametros.setNombre("Modalidad del tiempo para comer");
        parametros.setOrdenId(30);
        parametros.setValor("2");
        parametros.setOpcionesParametros("Se especifica el tiempo y un margen de tiempo para tomar comida :: Se especifica el horario");//JSA01
        parametros.setTipoConfiguracion(2);
        parametros.setPropiedadConfig("Por tiempo y margen|Por horario");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

//////////////////////////            parametros = new Parametros();
//////////////////////////            parametros.setClave(Long.valueOf("63"));
//////////////////////////            parametros.setNombre("Se especifica el tiempo y un margen de tiempo para tomar comida");
//////////////////////////            parametros.setOrdenId(31);
//////////////////////////            parametros.setValor("1");
//////////////////////////            parametros.setOpcionesParametros("");//JSA01
//////////////////////////            parametros.setTipoConfiguracion(1);
//////////////////////////            parametros.setPropiedadConfig("");
//////////////////////////            parametros.setElementosAplicacion(listRazonSocialElemento);
//////////////////////////            parametros.setModulo(listModulo.get(0));
//////////////////////////            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
//////////////////////////            listParametros.add(parametros);
//////////////////////////
//////////////////////////            parametros = new Parametros();
//////////////////////////            parametros.setClave(Long.valueOf("64"));
//////////////////////////            parametros.setNombre("Se especifica el horario");
//////////////////////////            parametros.setOrdenId(32);
//////////////////////////            parametros.setValor("1");
//////////////////////////            parametros.setOpcionesParametros("");//JSA01
//////////////////////////            parametros.setTipoConfiguracion(1);
//////////////////////////            parametros.setPropiedadConfig("");
//////////////////////////            parametros.setElementosAplicacion(listRazonSocialElemento);
//////////////////////////            parametros.setModulo(listModulo.get(0));
//////////////////////////            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
//////////////////////////            listParametros.add(parametros);
        parametros = new Parametros();
        parametros.setClave(Long.valueOf("65"));
        parametros.setNombre("Checar salida para comer");
        parametros.setOrdenId(33);
        parametros.setValor("1");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("66"));
        parametros.setNombre("Tolerancia Antes en Comida");
        parametros.setOrdenId(34);
        parametros.setValor("0");
        parametros.setOpcionesParametros("El tiempo es en minutos");//JSA01
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("2|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("67"));
        parametros.setNombre("Restringir salida a comer antes del tiempo");
        parametros.setOrdenId(35);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("68"));
        parametros.setNombre("Tolerancia Después en Comida");
        parametros.setOrdenId(36);
        parametros.setValor("0");
        parametros.setOpcionesParametros("El tiempo es en minutos");//JSA01
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("2|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("69"));
        parametros.setNombre("Considerar como retardo si excede tolerancia después de Entrada");
        parametros.setOrdenId(37);
        parametros.setValor("1");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("70"));
        parametros.setNombre("Tratamiento de Tiempo para comer");
        parametros.setOrdenId(38);
        parametros.setValor("1");
        parametros.setOpcionesParametros("Incluir en el tiempo ordinario :: No considerar como tiempo ordinario");//JSA01
        parametros.setTipoConfiguracion(2);
        parametros.setPropiedadConfig("Incluir en el tiempo ordinario|No considerar como tiempo ordinario");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

//////////////////////            parametros = new Parametros();
//////////////////////            parametros.setClave(Long.valueOf("71"));
//////////////////////            parametros.setNombre("Incluir en el tiempo ordinario");
//////////////////////            parametros.setOrdenId(39);
//////////////////////            parametros.setValor("1");
//////////////////////            parametros.setOpcionesParametros("");//JSA01
//////////////////////            parametros.setTipoConfiguracion(1);
//////////////////////            parametros.setPropiedadConfig("");
//////////////////////            parametros.setElementosAplicacion(listRazonSocialElemento);
//////////////////////            parametros.setModulo(listModulo.get(0));
//////////////////////            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
//////////////////////            listParametros.add(parametros);
//////////////////////
//////////////////////            parametros = new Parametros();
//////////////////////            parametros.setClave(Long.valueOf("72"));
//////////////////////            parametros.setNombre("No considerar como tiempo ordinario");
//////////////////////            parametros.setOrdenId(40);
//////////////////////            parametros.setValor("1");
//////////////////////            parametros.setOpcionesParametros("");//JSA01
//////////////////////            parametros.setTipoConfiguracion(1);
//////////////////////            parametros.setPropiedadConfig("");
//////////////////////            parametros.setElementosAplicacion(listRazonSocialElemento);
//////////////////////            parametros.setModulo(listModulo.get(0));
//////////////////////            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
//////////////////////            listParametros.add(parametros);
        parametros = new Parametros();
        parametros.setClave(Long.valueOf("73"));
        parametros.setNombre("Activar Segundo Coffe Break");
        parametros.setOrdenId(41);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("74"));
        parametros.setNombre("Activar checada salida y entrada para Segundo Coffe Break");
        parametros.setOrdenId(42);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

//            parametros = new Parametros();
//            parametros.setClave(Long.valueOf("75"));
//            parametros.setNombre("Etiqueta Segundo Coffe Break");
//            parametros.setOrdenId(43);
//            parametros.setValor("Segundo Coffe Break");
//            parametros.setOpcionesParametros("");//JSA01
//            parametros.setTipoConfiguracion(1);
//            parametros.setPropiedadConfig("");
//            parametros.setElementosAplicacion(listRazonSocialElemento);
//            parametros.setModulo(listModulo.get(0));
//            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
//            listParametros.add(parametros);
//            parametros = new Parametros();
//            parametros.setClave(Long.valueOf("76"));
//            parametros.setNombre("Género para Segundo Coffe Break");
//            parametros.setOrdenId(44);
//            parametros.setValor("M");
//            parametros.setOpcionesParametros("");//JSA01
//            parametros.setTipoConfiguracion(1);
//            parametros.setPropiedadConfig("");
//            parametros.setElementosAplicacion(listRazonSocialElemento);
//            parametros.setModulo(listModulo.get(0));
//            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
//            listParametros.add(parametros);
        parametros = new Parametros();
        parametros.setClave(Long.valueOf("77"));
        parametros.setNombre("El empleado tiene tiempo extra cuando llega antes de su hora");
        parametros.setOrdenId(45);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("78"));
        parametros.setNombre("El empleado tiene tiempo extra si dispone de su hora de comida");
        parametros.setOrdenId(46);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("79"));
        parametros.setNombre("Tratamiento para tiempo extra cuando el empleado asiste en días festivos");
        parametros.setOrdenId(47);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("80"));
        parametros.setNombre("Indicar si se paga horas extras");
        parametros.setOrdenId(48);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("81"));
        parametros.setNombre("Tope");
        parametros.setOrdenId(49);
        parametros.setValor("2");
        parametros.setOpcionesParametros("Diario o Semanal");//JSA01
        parametros.setTipoConfiguracion(2);
        parametros.setPropiedadConfig("Diario|Semanal");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("82"));
        parametros.setNombre("Indicar si se paga el dia festivo trabajado");
        parametros.setOrdenId(50);
        parametros.setValor("1");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("83"));
        parametros.setNombre("Tratamiento para tiempo extra cuando el empleado asiste en días de descanso");
        parametros.setOrdenId(51);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("84"));
        parametros.setNombre("Indicar si se paga horas extras");
        parametros.setOrdenId(52);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("85"));
        parametros.setNombre("Tope ");
        parametros.setOrdenId(53);
        parametros.setValor("2");
        parametros.setOpcionesParametros("Diario o Semanal");//JSA01
        parametros.setTipoConfiguracion(2);
        parametros.setPropiedadConfig("Diario|Semanal");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("86"));
        parametros.setNombre("Indicar si se paga el descanso trabajado");
        parametros.setOrdenId(54);
        parametros.setValor("1");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("87"));
        parametros.setNombre("El empleado tiene tiempo extra cuando sale después de su hora de salida");
        parametros.setOrdenId(55);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("88"));
        parametros.setNombre("Usar tiempo extra para compensar tiempo ordinario no completado");
        parametros.setOrdenId(56);
        parametros.setValor("1");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("89"));
        parametros.setNombre("Tiempo mínimo para considerar tiempo extra");
        parametros.setOrdenId(57);
        parametros.setValor("0");
        parametros.setOpcionesParametros("El tiempo es en minutos");//JSA01
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("2|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("90"));
        parametros.setNombre("Tipo de Redondeo para horas extras");
        parametros.setOrdenId(58);
        parametros.setValor("1");
        parametros.setOpcionesParametros("El personalizado se puede establecer el redondeo y el factor del mismo, con la opcion de tabla se selecciona una opcion guardado desde el catalago de tipo de redondeos");//JSA01
        parametros.setTipoConfiguracion(2);
        parametros.setPropiedadConfig("Personalizado|Tabla");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

//            parametros = new Parametros();
//            parametros.setClave(Long.valueOf("91"));
//            parametros.setNombre("Redondeo y Factor de Redondeo");
//            parametros.setOrdenId(59);
//            parametros.setValor("1");
//            parametros.setOpcionesParametros("");//JSA01
//            parametros.setTipoConfiguracion(1);
//            parametros.setPropiedadConfig("");
//            parametros.setElementosAplicacion(listRazonSocialElemento);
//            parametros.setModulo(listModulo.get(0));
//            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
//            listParametros.add(parametros);
//
//            parametros = new Parametros();
//            parametros.setClave(Long.valueOf("92"));
//            parametros.setNombre("Tabla");
//            parametros.setOrdenId(60);
//            parametros.setValor("1");
//            parametros.setOpcionesParametros("");//JSA01
//            parametros.setTipoConfiguracion(1);
//            parametros.setPropiedadConfig("");
//            parametros.setElementosAplicacion(listRazonSocialElemento);
//            parametros.setModulo(listModulo.get(0));
//            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
//            listParametros.add(parametros);
        parametros = new Parametros();
        parametros.setClave(Long.valueOf("93"));
        parametros.setNombre("Aplicar regla para Retardos ('x' retardos en 'y' días equivale a 'z' faltas)");
        parametros.setOrdenId(61);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("94"));
        parametros.setNombre("Número de Retardos");
        parametros.setOrdenId(62);
        parametros.setValor("0");
        parametros.setOpcionesParametros("Ingresar el número de retardos");//JSA01
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("2|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("95"));
        parametros.setNombre("Número de dias naturales en que ocurrieron retardos");
        parametros.setOrdenId(63);
        parametros.setValor("0");
        parametros.setOpcionesParametros("Ingresar los dias");//JSA01
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("2|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("96"));
        parametros.setNombre("Número de faltas a considerar");
        parametros.setOrdenId(64);
        parametros.setValor("0");
        parametros.setOpcionesParametros("Ingresar las faltas");//JSA01
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("2|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("97"));
        parametros.setNombre("Tratamiento de Séptimo Día");
        parametros.setOrdenId(65);
        parametros.setValor("1");
        parametros.setOpcionesParametros("Si es pagar completo ingresar el mínimo a trabajar..");//JSA01
        parametros.setTipoConfiguracion(2);
        parametros.setPropiedadConfig("Proporcional|Pagar completo");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

////////////            parametros = new Parametros();
////////////            parametros.setClave(Long.valueOf("98"));
////////////            parametros.setNombre("Proporcional");
////////////            parametros.setOrdenId(66);
////////////            parametros.setValor("1");
////////////            parametros.setOpcionesParametros("");//JSA01
////////////            parametros.setTipoConfiguracion(1);
////////////            parametros.setPropiedadConfig("");
////////////            parametros.setElementosAplicacion(listRazonSocialElemento);
////////////            parametros.setModulo(listModulo.get(0));
////////////            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
////////////            listParametros.add(parametros);
////////////            parametros = new Parametros();
////////////            parametros.setClave(Long.valueOf("99"));
////////////            parametros.setNombre("Pagar completo");
////////////            parametros.setOrdenId(67);
////////////            parametros.setValor("1");
////////////            parametros.setOpcionesParametros("");//JSA01
////////////            parametros.setTipoConfiguracion(1);
////////////            parametros.setPropiedadConfig("");
////////////            parametros.setElementosAplicacion(listRazonSocialElemento);
////////////            parametros.setModulo(listModulo.get(0));
////////////            parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
////////////            listParametros.add(parametros);
        parametros = new Parametros();
        parametros.setClave(Long.valueOf("100"));
        parametros.setNombre("Mínimo a trabajar para pago de séptimo día");
        parametros.setOrdenId(68);
        parametros.setValor("8");
        parametros.setOpcionesParametros("Ingresar las horas");//JSA01
        parametros.setTipoConfiguracion(4);
        parametros.setPropiedadConfig("2|@");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.HORARIOSTURNO);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("101"));
        parametros.setNombre("¿Tipo de accion a aplicar sobre el resultado del concepto en los movimientos?");
        parametros.setOrdenId(31);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");
        parametros.setTipoConfiguracion(2);
        parametros.setPropiedadConfig("Truncado|Redondeo");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.CONCEPTOS);
        listParametros.add(parametros);
        parametros = new Parametros();

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("102"));
        parametros.setNombre("Mascara para el resultado del concepto");
        parametros.setOrdenId(32);
        parametros.setValor("############.##");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(5);
        parametros.setPropiedadConfig("12|2");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.CONCEPTOS);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("103"));
        parametros.setNombre("Mascara para sueldos");
        parametros.setOrdenId(30);
        parametros.setValor("############.##");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(5);
        parametros.setPropiedadConfig("12|2");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.SUELDOSYSALARIOS);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("104"));
        parametros.setNombre("Mascara para sueldo diario");
        parametros.setOrdenId(31);
        parametros.setValor("############.##");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(5);
        parametros.setPropiedadConfig("12|2");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.SUELDOSYSALARIOS);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("105"));
        parametros.setNombre("Mascara para salario diario integrado");
        parametros.setOrdenId(32);
        parametros.setValor("############.##");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(5);
        parametros.setPropiedadConfig("12|2");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.SUELDOSYSALARIOS);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("106"));
        parametros.setNombre("Mascara para horas");
        parametros.setOrdenId(33);
        parametros.setValor("##.##");
        parametros.setOpcionesParametros("horas:minutos (hh:mm)o en numeros (##.##)");//JSA01
        parametros.setTipoConfiguracion(5);
        parametros.setPropiedadConfig("2|2");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.SUELDOSYSALARIOS);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("107"));
        parametros.setNombre("¿Permitir manejar categoria de puesto?");
        parametros.setOrdenId(36);
        parametros.setValor("1");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("108"));
        parametros.setNombre("¿Permitir manejar subcuenta en los departamentos?");
        parametros.setOrdenId(36);
        parametros.setValor("2");
        parametros.setOpcionesParametros("");//JSA01
        parametros.setTipoConfiguracion(1);
        parametros.setPropiedadConfig("");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("109"));
        parametros.setNombre("Ubicación de los reportes del sistema");
        parametros.setOrdenId(37);
        parametros.setValor("C:\\REPORTESSISTEMAS");
        parametros.setOpcionesParametros("Esta es la ubicación de los reportes fijos en el servidor");//JSA01
        parametros.setTipoConfiguracion(6);
        parametros.setPropiedadConfig("255");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

        parametros = new Parametros();
        parametros.setClave(Long.valueOf("110"));
        parametros.setNombre("Carpeta del reporte de nomina");
        parametros.setOrdenId(38);
        parametros.setValor("REPORTENOMINA");
        parametros.setOpcionesParametros("Esta es la carpeta del reporte de nómina que se encuentra dentro de los reportes fijos del sistema.");//JSA01
        parametros.setTipoConfiguracion(6);
        parametros.setPropiedadConfig("255");
        parametros.setElementosAplicacion(listRazonSocialElemento);
        parametros.setModulo(listModulo.get(0));
        parametros.setClasificacion(Clasificacion.GLOBAL);
        listParametros.add(parametros);

//        servicioParametros.saveDeleteParametros(listParametros, null, 15);
//</editor-fold>
        ServicioTablaBaseIF servicioTablaBase = (ServicioTablaBaseIF) context.getBean("servicioTablaBase");
        mensaje = servicioTablaBase.getTablaBaseSistema("sa|MEFMaster2|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|M");

        List<TablaBase> tablasBaseSistema = (List<TablaBase>) mensaje.getResultado();
        cInicioImss.set(2014, Calendar.DECEMBER, 01);
        cInicioPeriodo.set(2014, Calendar.DECEMBER, 15);
        ParametrosExtra extra = new ParametrosExtra();
        List<Object> parametrosExtras = new ArrayList<Object>();
        parametrosExtras.add("05");
        parametrosExtras.add("07");
        extra.setValoresExtras(parametrosExtras);
        extra.setFechaInicioPeriodo(cInicioImss.getTime());
        extra.setFechaFinPeriodo(cInicioPeriodo.getTime());  //anual
        //extra.setTablasBaseSistema(tablasBaseSistema);
        extra.setDescontarAhorro(false);
        extra.setDescontarPrestamos(false);
        extra.setSoloPrestamo(false);
        extra.setTipoAccionMascaras(TipoAccionMascaras.Redondear);
        extra.setMascaraResultado(new String[]{"############", "##"});
        ServicioCalculoNominaIF calculoNominaIF = (ServicioCalculoNominaIF) context.getBean("servicioCalculoNomina");
        mensaje = (Mensaje) calculoNominaIF.calculaNomina(
                "00001", "",
                "0005",
                "NOR",
                21L,
                "", "", "", "0001",
                "",
                "",
                "", "", null,
                null, null,
                "RazonesSociales0001#Empleados00001#TipoNomina0005#TipoCorridaNOR", 0, extra, 2014,
                "sa|MEF2|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|N",
                "sa|MEFMaster2|com.microsoft.sqlserver.jdbc.SQLServerDriver|localhost|1433|M"
        );
////                mensaje = (Mensaje) calculoNominaIF.calculaNomina(
////                "00005", "",
////                "0010",
////                "NOR",
////                "001",
////                "", "", "", "0001",
////                "",
////                "",
////                "", "", null,
////                null, null,
////                "RazonesSociales0001#Empleados00005#TipoNomina0010#TipoCorridaNOR", 0, extra, 2014);
        System.out.println(mensaje.getError());
        System.out.println("");
        ////calculoNominaIF.busquedaQueryConsultaEmpleados(new String[]{}, new String[]{"PlazasPorEmpleadosMov.plazasPorEmpleado.empleados.nombre"}, new String[]{"PlazasPorEmpleadosMov.plazasPorEmpleado.razonesSociales.clave"}, new Object[]{"1"}, new String[]{}, new String[]{}, new String[]{"|MovNomConcep.concepNomDefi.clave|IN|1^3^5"}, "FuenteDatos_Empleados", new Date());
        /////// calculoNominaIF.busquedaQueryConsultaEmpleados(new String[]{}, new String[]{"CncUnidadPrincipal_Path", "TotalPercepcion_Path", "ConceptoImporte_Path", "Empleados_Nombre_Apellidos_Path", "PlazasPorEmpleadosMov.plazasPorEmpleado.empleados.estadoCivil"}, new String[]{"PlazasPorEmpleadosMov.plazasPorEmpleado.razonesSociales.clave", "PlazasPorEmpleadosMov.tipoNomina.clave"}, new Object[]{"1", "5"}, new String[]{}, new String[]{"1|OTROS", "", "1|", "", ""}, new String[]{}, "FuenteDatos_Empleados", new Date[]{cInicioImss.getTime(), cInicioPeriodo.getTime()});
//ConceptoImporte_Path
//        ServicioCalculoNominaIF base = (ServicioCalculoNominaIF) context.getBean("servicioCalculoNomina");
////        base.obtenerConexion("sa", "adminadmin", "MEF", "com.microsoft.sqlserver.jdbc.SQLServerDriver", "localhost", "1433", true);
//        //      base.inicializarNuevaMEF(15, "MEF");
//        Boolean status = null;
//        Integer tipoSueldo = null;
//        status = true;
//
//        tipoSueldo = 0;
//        String clavePuesto, claveCategoriaPuesto, claveCentroCosto, claveDepto, claveTurno, claveFormaPago, claveRegistroPat, claveEmpIni, claveEmpFin;
//        clavePuesto = "1";
//        claveCategoriaPuesto = "1";
//        claveTurno = "1";
//        claveDepto = "1";
//        claveCentroCosto = "1";
//        claveEmpIni = "1";
//        claveEmpFin = claveEmpIni;
//        claveFormaPago = "1";
//        claveRegistroPat = "1";
//
//        long ini = System.currentTimeMillis();
//        ParametrosExtra extra = new ParametrosExtra();
////            List<Object> parametrosExtras = new ArrayList<Object>();
////            parametrosExtras.add(((TipoNomina) jcbTipoNomina.getValorSeleccionado()).getPeriodicidad().getClave());
////            parametrosExtras.add(clavePeriodicidadAnual.getClave());  //anual
////            extra.setValoresExtras(parametrosExtras);
//        extra.setFechaCalculoSDI(Calendar.getInstance().getTime());
//        base.calculaSalarioDiarioIntegerado(
//                claveEmpIni, claveEmpFin,
//                "5",
//                "NOR",
//                "1",
//                clavePuesto, claveCategoriaPuesto, claveTurno, "1", claveRegistroPat,
//                claveFormaPago, claveDepto, claveCentroCosto, tipoSueldo, "1",
//                status, "RazonesSociales".concat("1"), 0, extra, true);
        //<editor-fold defaultstate="collapsed" desc="Reporte">
//        //<editor-fold defaultstate="collapsed" desc="llenado de Reporte datos">
//        //        ServicioReporteDatosIF especialesIF = (ServicioReporteDatosIF) context.getBean("servicioReporteDatos");
//        //        Field[] fields = Resultado.class.getDeclaredFields();
//        //        ReporteDatos reporteDatos = null;
//        //        ReporteFuenteDatos reporteFuenteDatos = new ReporteFuenteDatos();
//        //        reporteFuenteDatos.setClave("1");
//        //        reporteFuenteDatos.setNombre("Movimientos de nomina");
//        //        reporteFuenteDatos.setNombreEntidad(Resultado.class.getName());
//        //        reporteFuenteDatos.setOrden(1);
//        //        List<ReporteDatos> listReporteDatos = new ArrayList<ReporteDatos>();
//        //        for (int i = 0; i < fields.length; i++) {
//        //            reporteDatos = new ReporteDatos();
//        //            reporteDatos.setNombre(fields[i].getName());
//        //            reporteDatos.setNombreCampo(fields[i].getName());
//        //            reporteDatos.setNombreEtiqueta(fields[i].getName() );
//        //            reporteDatos.setOrden(i);
//        //            reporteDatos.setReporteFuenteDatos(reporteFuenteDatos);
//        //            reporteDatos.setTipoCampo(fields[i].getType().getName());
//        //            listReporteDatos.add(reporteDatos);
//        //        }
//        //        especialesIF.agregarListaReporteDatos(listReporteDatos, reporteFuenteDatos, 10);
//        //</editor-fold>
//        
//        ServicioReporteFuenteDatosIF servicioReporteFuenteDatos = (ServicioReporteFuenteDatosIF) context.getBean("servicioReporteFuenteDatos");
//        ReporteFuenteDatos datos = servicioReporteFuenteDatos.getReporteFuenteDatosPorClave("1");
//        
//        ServicioRazonesSocialesIF servicioRazonesSociales = (ServicioRazonesSocialesIF) context.getBean("servicioRazonesSociales");
//        RazonesSociales razonesSociales = servicioRazonesSociales.getRazonesPorClave("1");
//        
//        ServicioReporteDatosIF servicioReporteDatos = (ServicioReporteDatosIF) context.getBean("servicioReporteDatos");
//        List<ReporteDatos> reporteDatoses = new ArrayList<ReporteDatos>();
//        ReporteDatos datos1 = servicioReporteDatos.getReporteDatosPorId(31L);
//        reporteDatoses.add(datos1);
//        datos1 = servicioReporteDatos.getReporteDatosPorId(33L);
//        reporteDatoses.add(datos1);
//        
//        List<ReporteOrdenGrupo> listReporteOrdenGrupos = new ArrayList<ReporteOrdenGrupo>();
//        ServicioReporteOrdenGrupoIF servicioReporteOrdenGrupo = (ServicioReporteOrdenGrupoIF) context.getBean("servicioReporteOrdenGrupo");
//        ReporteOrdenGrupo reporteOrdenGrupo = new ReporteOrdenGrupo();
//        reporteOrdenGrupo.setIncluirEncabezado(true);
//        reporteOrdenGrupo.setIncluirPie(true);
//        reporteOrdenGrupo.setOrden(1);
//        //reporteOrdenGrupo.setDatosConsulta(reporteDatoses.get(0));
//        reporteOrdenGrupo.setAgrupar(true);
//        reporteOrdenGrupo = servicioReporteOrdenGrupo.agregar(reporteOrdenGrupo);
//        listReporteOrdenGrupos.add(reporteOrdenGrupo);
//        
//        reporteOrdenGrupo = new ReporteOrdenGrupo();
//        reporteOrdenGrupo.setIncluirEncabezado(true);
//        reporteOrdenGrupo.setIncluirPie(true);
//        reporteOrdenGrupo.setOrden(1);
//        //reporteOrdenGrupo.setReporteDatos(reporteDatoses.get(1));
//        reporteOrdenGrupo.setAgrupar(true);
//        reporteOrdenGrupo = servicioReporteOrdenGrupo.agregar(reporteOrdenGrupo);
//        listReporteOrdenGrupos.add(reporteOrdenGrupo);
//        
//        List<ReporteDatosIncluir> listReporteDatosIncluir = new ArrayList<ReporteDatosIncluir>();
//        ReporteDatosIncluir reporteDatosIncluir = new ReporteDatosIncluir();
//        reporteDatosIncluir.setOperacion(null);
//        //reporteDatosIncluir.setReporteDato(reporteDatoses.get(0));
//        listReporteDatosIncluir.add(reporteDatosIncluir);
//        reporteDatosIncluir = new ReporteDatosIncluir();
//        reporteDatosIncluir.setOperacion(null);
//        //reporteDatosIncluir.setReporteDato(reporteDatoses.get(1));
//        listReporteDatosIncluir.add(reporteDatosIncluir);
//        
//        ReporteDinamico reporteDinamico = new ReporteDinamico();
//        //reporteDinamico.setContenedor_id(4);
//        
//        //reporteDinamico.setDatosIncluir(listReporteDatosIncluir);
//        //reporteDinamico.setFuenteDatos(datos);
//        reporteDinamico.setIncluirNoPagina(true);
//        reporteDinamico.setIncluirTotalGeneral(true);
//        reporteDinamico.setNombre("Armando");
//        reporteDinamico.setNombreAbreviado("JSA");
//        reporteDinamico.setOrden(1);
//        //reporteDinamico.setRazonesSociales(razonesSociales);
//        reporteDinamico.setReporteOrdenGrupos(listReporteOrdenGrupos);
//        
//        ServicioReporteDinamicoIF servicioReporteDinamico = (ServicioReporteDinamicoIF) context.getBean("servicioReporteDinamico");
//        servicioReporteDinamico.agregar(reporteDinamico);
        //</editor-fold>
//
//<editor-fold defaultstate="collapsed" desc="tmp">
        //        ServicioConsultaGenericaEspecialesIF especialesIF = (ServicioConsultaGenericaEspecialesIF) context.getBean("servicioConsultaGenericaEspeciales");
        //        String[] tablas = new String[]{MovNomConcep.class.getSimpleName(), PlazasPorEmpleadosMov.class.getSimpleName()};
        //        String camposMostrar = "movNomConcep.movNomBaseAfecta.resultado,movNomConcep.movNomConceParam.resultado,movNomConcep.movNomBaseAfecta.resultado,movNomConcep.periodosNomina.descripcion,movNomConcep.periodosNomina.diasPago";
        //        String camposOrden = "movNomConcep.periodosNomina.clave";
        //        String[] camposWhere = new String[]{"movNomConcep.razonesSociales.clave", "movNomConcep.empleado.clave#>=", "movNomConcep.empleado.clave#<=", "movNomConcep.tipoNomina.clave", "movNomConcep.periodosNomina.clave", "salariosIntegrados.tipoDeSalario"};
        //        camposWhere = new String[]{"movNomConcep.razonesSociales.clave", "movNomConcep.tipoNomina.clave"};
        //        Object[] valoresWhere = new Object[] {"1","5"};
        //        especialesIF.obtenerDatosCriterioConsulta(tablas, camposMostrar.split(","), camposWhere, valoresWhere, camposOrden.split(","));
        //
        //
        //        ServicioConceptoDeNominaDefinicionIF nominadef = (ServicioConceptoDeNominaDefinicionIF) context.getBean("servicioConceptoDeNominaDefinicion");
        //
        //        ServicioCalculoNominaIF calculoNominaIF = (ServicioCalculoNominaIF) context.getBean("servicioCalculoNomina");
        //        ParametrosExtra parametrosExt = new ParametrosExtra();
        //        Calendar calendar = Calendar.getInstance(), calendar2 = Calendar.getInstance();
        //        calendar.set(2012, 07, 17);
        //        calendar2.set(2012, 07, 17);
        ////        parametrosExt.setFechaBajaFiniq(calendar.getTime());
        ////        parametrosExt.setFechaCalculoFiniq(calendar2.getTime());
        ////        List<Object> parametrosExtras = new ArrayList<Object>();
        ////        parametrosExtras.add("000000-0002");
        ////        parametrosExtras.add("000000-0007");  //anual
        //////        calculoNominaIF.calculaNomina("1", "2", "5", "NOR", "17", null, "", "", "1", "", "","", "",
        //////                null, null, null, "RazonesSociales1", 0, parametrosExt);
        //        parametrosExt.setFechaCalculoSDI(fechaHoy);
        //        // calculoNominaIF.calculaSalarioDiarioIntegeradoNew("hola");
        //        calculoNominaIF.calculaSalarioDiarioIntegerado("3", "3", "5", "NOR", "18", "", "", "", "1", "", "", "", "",
        //                null, -1, null, "RazonesSociales1", 0, parametrosExt);
        ////        calculoNominaIF.calculaNomina("1", "1000", "3", "VAC", null, "", "", "", "", "", "", "1",
        ////                null, null, null, "RazonesSociales1");
        ////        calculoNominaIF.calculaNomina("1", "1", "3", "PTU", "1", "000000-0002", null, "", "", "", "", "", "",
        ////                null, null, null, "RazonesSociales1", 0);
        //        ServicioTipoNominaIF tipoNomina = (ServicioTipoNominaIF) context.getBean("servicioTipoNomina");
        //        ServicioPeriodosNominaIF periodoNomina = (ServicioPeriodosNominaIF) context.getBean("servicioPeriodosNomina");
        //        ServicioUsuarioIF usuario = (ServicioUsuarioIF) context.getBean("servicioUsuario");
        ////        ServicioPeriodoIF periodo = (ServicioPeriodoIF) context.getBean("servicioPeriodo");
        ////        System.out.println(periodo.getPeriodoPorClaveYTipoDeNomina("1", "1").getClave());
        //        PeriodosNomina p = new PeriodosNomina();
        //        List<PeriodosNomina> a = periodoNomina.getPeriodosNominaPorAñoYTipoNomina(2009, tipoNomina.getTipoNominaPorClave("2").getClave());
        //        List<PeriodosNomina> array = new ArrayList<PeriodosNomina>();
        //        for (PeriodosNomina string : a) {
        //            System.out.println(string.getDescripcion());
        //        }
        //        //        p=periodoNomina.getPeriodosNominaPorAñoYTipoNomina("3");
        //        Calendar dd = Calendar.getInstance();
        //        for (int x = 1; x < 5; x++) {
        //            p = new PeriodosNomina();
        ////            p.setId(x);
        //            p.setTipoNomina(tipoNomina.getTipoNominaPorClave("1"));
        //            p.setAño(2009);
        //            p.setClave(String.valueOf(x) + "rsas");
        //            p.setDescripcion("p" + x);
        //            p.setAcumularAMes(dd.getTime());
        //            p.setBloquear(false);
        //            p.setCierreMes(false);
        //            p.setFechaAsistenciInicial(dd.getTime());
        //            p.setFechaAsistenciaFinal(dd.getTime());
        //            p.setFechaFinal(dd.getTime());
        //            p.setFechaInicial(dd.getTime());
        //            p.setFechaCierre(dd.getTime());
        //            p.setFechaModificado(Calendar.getInstance().getTime());
        //            p.setFechaPago(dd.getTime());
        //            p.setDescontarAhorro(false);
        //            p.setDescontarPrestamo(false);
        //            p.setDiasIMSS(10);
        //            p.setDiasPago(10);
        //            p.setIncluirBajas(false);
        //            p.setSoloPercepciones(false);
        //            p.setStatus(true);
        //            p.setTipoUso(0);
        //            p.setClaveUsuario("2");
        //            array.add(p);
        //        }
        //        Object[] v;
        //        Object[] eliminados = new Object[a.size()];
        //        for (int i = 0; i < a.size(); i++) {
        //            eliminados[i] = a.get(i).getId();
        //        }
        //List<PeriodosNomina> a2 =   periodoNomina.saveDeletePeriodosNomina(array,  eliminados);
        //        for (PeriodosNomina string : a2) {
        //            System.out.println(string.getDescripcion());
        //        }
        //System.out.println(costos.getCentroDeCostoPorClaveYRazon("1", "1").getId());
        //   RazonesSociales o = razones.getRazonesPorClave("1");
        //System.out.println(o.getId());
        //  System.out.println(empleado.getEmpleadoPorClaveYRazon("1", "1").getNombre());
        //ConsultaGenericaDAO dAO = new ConsultaGenericaDAO();
        //dAO.setSession(HibernateUtil.getSessionFactoryMEF().getCurrentSession());
        //        Compuesta compuesta = new Compuesta();
        //        CompuestaPK pK = new CompuestaPK();
        //        CompuestaID compuestaID = new CompuestaID();
        //        compuestaID.setClave("1");
        //        pK.setCompuestaID(compuestaID);
        //        pK.setEdad(18);
        //        compuesta.setCompuestaPK(pK);
        //        compuesta.setNombre("victor");
        //
        //        Product product = new Product();
        //        product.setDescription("des");
        //        product.setName("name");
        //        Item item = new Item();
        //        item.setName("item");
        //
        //        ProductItem pi = new ProductItem();
        //        pi.setDescription("descrip");
        //        pi.setProduct(product);
        //        pi.setItem(item);
        //
        //        dAO.getSession().beginTransaction();
        //        dAO.makePersistent(pi);
        //        dAO.getSession().getTransaction().commit();
        //        // TODO code application logic here
        //        //ALTER AUTHORIZATION ON DATABASE::crm TO sa
        //        ApplicationContext context = new ClassPathXmlApplicationContext("remoting-servlet.xml");
        ////        ServicioRegistroPatronal rp = (ServicioRegistroPatronal) context.getBean("servicioRegistroPatronal");
        ////        ServicioRazonesSociales rs = (ServicioRazonesSociales) context.getBean("servicioRazonesSociales");
        ////        ServicioPrima primas = (ServicioPrima) context.getBean("servicioPrima");
        ////        ServicioContenedor contenedor = (ServicioContenedor) context.getBean("servicioContenedor");
        //        ServicioCategoriasPuestosIF c = (ServicioCategoriasPuestosIF) context.getBean("servicioCategoriasPuestos");
        //            c.getCategoriasPuestosAll();
        //        ServicioRegistroPatronalIF r = (ServicioRegistroPatronalIF) context.getBean("servicioRegistroPatronal");
        //
        //        ServicioPuestosIF mod = (ServicioPuestosIF) context.getBean("servicioPuestos");
        //
        //        Puestos p=new Puestos();
        //
        //        p.setClave("1");
        //        p.setDescripcion("Puesto 1");
        //        p.setFunciones("funcion del puesto");
        //        p.setMaximo(80);
        //        p.setMinimo(50);
        //        p.setPromedio((p.getMaximo()+p.getMinimo())/2);
        //        p.setTipoContrato("individual");
        //        p.setTipoSalario("fijo");
        //        p.setCategoriasPuestos(c.getCategoriasPuestosPorClave("1"));
        //        p.setRegistroPatronal(r.getRegistroPatronalPorClave("1"));
        //        mod.agregar(p);
        //
        //        System.out.println(mod.getPuestosPorClave("1").getDescripcion().toString());
        //        List<Parametros> a = el.getParametrosPorModulo(2);
        //
        //        for (Parametros string : a) {
        //            System.out.println(string.getNombre());
        //        }
        //         List<Modulo> d = mod.getModuloPorSistemas(2);
        //
        //        for (Modulo string : d) {
        //            System.out.println(string.getNombre());
        //
        //        }
        //System.out.println(rs.validaRFC("VACE8947235"));
        // rs.validaRFC("VACE894723");
        //        RazonesSociales r = new RazonesSociales();
        //        r.getRfc();
        //        Paises p = new Paises();
        //        p.setClave(8L);
        //        p.setDescripcion("Suiza");
        //        el.agregar(p);
        //        ElementoExterno e = new ElementoExterno();
        //        e.setContenedor(b.get(20));
        //        //e.setContenedor();
        //        e.setUbicacion("Kiubo");
        //
        //        el.agregar(e);
        //        ServicioEstadosIF estados = (ServicioEstadosIF) context.getBean("servicioEstados");
        //ServicioPrimaIF registros = (ServicioPrimaIF) context.getBean("servicioPrima");
        //        ServicioRazonesSocialesIF razon = (ServicioRazonesSocialesIF) context.getBean("servicioRazonesSociales");
        //        razon.getRazonesAll();
        //        b.setId(1L);
        //        b.setClave(1L);
        //        b.setDescripcion("Banco prueba");
        //        b.setDomicilio("Domicilio Prueba");
        //        b.setNotas("Notas Prueba");
        //        b.setPaginaweb("pagina@prueba");
        //        b.setRFC("RFCPRUEBA01");
        //        bancosIF.actualizar(b);
        // b=bancosIF.getBancosPorClave(1L);
        //   System.out.println(b.getDescripcion());
        //        ApplicationContext context = new ClassPathXmlApplicationContext("remoting-servlet.xml");
        ////        ServicioEstadosIF estados = (ServicioEstadosIF) context.getBean("servicioEstados");
        //        ServicioPrimaIF registros = (ServicioPrimaIF) context.getBean("servicioPrima");
        ////        ServicioRazonesSocialesIF razon = (ServicioRazonesSocialesIF) context.getBean("servicioRazonesSociales");
        ////        razon.getRazonesAll();
        //        List<Primas> p = registros.getPrimasAll();
        //
        //                for (Primas pa : p) {
        //                            System.out.println(pa.getPrima());
        //                        }
        //</editor-fold>
        // <editor-fold defaultstate="collapsed" desc="Puebas anteriores">
        // razon.getRazonesAll();
        // razones.getRazonesSocialesAll();
        // razones.getRazonesSocialesAll();
        //        ServicioModuloIF modulo = ( ServicioModuloIF) context.getBean("servicioModulo");
        //        Modulo m = modulo.getModuloPorNombre("CatalogoCP");
        //        ServicioEstadosIF estados = ( ServicioEstadosIF) context.getBean("servicioEstados");
        //       // ServicioPaisesIF paises = ( ServicioPaisesIF) context.getBean("servicioPaises");
        //        Paises pp = paises.getPaisPorClave(new Long(1));
        //         List<Estados> es = estados.consultaPorFiltros("from Estados o where Paises = :Paises0",
        //                 new Object[]{"Paises0"}, new Object[]{pp});
        ////        List<Estados> ee =  estados.consultaPorFiltros("Estados", new String[]{"descriPcioN"},
        ////                new String[]{"123"},  new String[]{""}, new String[]{""});
        //        //ServicioPaisesIF paises = ( ServicioPaisesIF) context.getBean("servicioPaises");
        //        List<Paises> pais = paises.consultaPorFiltros("from Paises o where Clave = :Clave or Clave = :Clave1",
        //                new Object[]{"Clave", "Clave1"}, new Object[]{1, 3});
        //        pais = paises.consultaPorFiltros("from Paises o where  Descripcion like % :Descripcion0 % ",
        //                new Object[]{"Descripcion0"}, new Object[]{"m"});
        //        ServicioTipoElementoIF ste = (ServicioTipoElementoIF) context.getBean("servicioTipoElemento");
        //         ServicioHerramientaIF herramientaIF = (ServicioHerramientaIF) context.getBean("servicioHerramienta");
        //         List<Herramienta> herramienta = herramientaIF.getHerramientasPrincipales();
        //        Estados e  = estados.getEstadosPorClave(Long.valueOf(1));
        //        System.out.println(e.getDescripcion());
        // Paises p = paises.getPaisPorClave(Long.valueOf(1));
        // System.out.println(p.getDescripcion());
                /*
         * Paises p = paises.getPaisPorClave(Long.valueOf(1));
         * System.out.println(p.getDescripcion());
         *
         * ServicioHerramientaIF shif = (ServicioHerramientaIF)
         * context.getBean("servicioHerramienta"); List<Herramienta> h =
         * shif.getHerramientaAll();
         *
         * System.out.println("her " + h.size());
         *
         * // ServicioPaisesIF pais = (ServicioPaisesIF)
         * context.getBean("servicioPaises");
         *
         *
         * // List<Paises> ps = pais.getPaisAll(); //
         * System.out.println(ps.size()); // ServicioPaisesIF pais =
         * (ServicioPaisesIF) context.getBean("servicioPaises"); //
         * pais.getPaisAll(); //ServicioTipoElementoIF ste =
         * (ServicioTipoElementoIF) context.getBean("servicioTipoElemento");
         *
         * //List<TipoElemento> elemento = ste.getTipoElementoAll();
         * //System.out.println(elemento.size());
         *
         * ServicioRolIF rolIF = (ServicioRolIF) context.getBean("servicioRol");
         * List<Rol> rol = rolIF.getRolAll(); ServicioContenedorIF contenedorIF
         * = (ServicioContenedorIF) context.getBean("servicioContenedor");
         * Contenedor c = contenedorIF.getContenedorPorId(1);
         * System.out.println("Contenedor " + c.getNombre()); ServicioPermisosIF
         * permisosIF = (ServicioPermisosIF)
         * context.getBean("servicioPermisos");
         *
         * Permisos permisos = new Permisos(); permisos =
         * permisosIF.getPermisosRolyAccion(rol.get(2),
         * "catalogoMunicipios".toUpperCase()); //
         * permisos.setConsultar(Boolean.TRUE); // permisos.setEliminar(false);
         * // permisos.setInsertar(false); //
         * permisos.setModificar(Boolean.TRUE); ContenedorPersonalizado cp = new
         * ContenedorPersonalizado(); // cp.setHabilitado(c.isHabilitado()); //
         * cp.setIcono(c.getIcono()); // cp.setKeyCode(c.getKeyCode()); //
         * cp.setNombre(c.getNombre()); //
         * cp.setHerramienta(c.getHerramienta()); // cp.setContenedor(c); //
         * cp.setVisible(c.isVisible()); // cp.setOrdenId(c.getOrdenId()); //
         * cp.setParentId(c.getParentId()); // permisos.setContenedor(cp); //
         * cp.setPermiso(permisos); ServicioContenedorPersonalizadoIF cpIF =
         * (ServicioContenedorPersonalizadoIF)
         * context.getBean("servicioContenedorPersonalizado");
         *
         * List<ContenedorPersonalizado> list = cpIF.getContenedorPersonalAll();
         * //cp.setPermiso(permisos); // permisos.setContenedor(cp);
         *
         *
         * //permisosIF.agregar(permisos);
         *
         * // ServicioElementoExternoIF externoIF = (ServicioElementoExternoIF)
         * context.getBean("servicioElementoExterno"); // ElementoExterno
         * externo = externoIF.getElementoExPorContenedor(c); //
         * System.out.println("externo " + externo.getUbicacion());
         *
         *
         * // System.out.println(p.getDescripcion());
         *
         *
         * // System.out.println(p.getDescripcion());
         *
         *
         * // List<Estados> ed = estados.getEstadosPorPais(p); // for (Estados
         * est : ed) { // System.out.println(est.getDescripcion()); // // }
         * List<Estados> ed = estados.getEstadosPorPais(p); for (Estados est :
         * ed) { System.out.println(est.getDescripcion()); }
         */ // List<Paises> pa = paises.getPaisAll();
        //        Estados e = estados.getEstadosPorClave(Long.valueOf(15));
        //        e.setDescripcion("James");
        //        e.setPaises(pa.get(3));
        //        System.out.println(e.getDescripcion());
        /// estados.actualizar(e);
                /*
         * List<Estados> ps = estados.getEstadosAll();
         * System.out.println(ps.size());
         */
        // </editor-fold>
    }
}
